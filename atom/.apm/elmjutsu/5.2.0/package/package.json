{"name":"elmjutsu","main":"./lib/main","version":"5.2.0","description":"A bag of tricks for developing with Elm. (Autocompletion, Go To Definition, Find Usages, Rename Symbol, etc.)","keywords":["elm","ide"],"activationCommands":{},"repository":{"type":"git","url":"git+https://github.com/halohalospecial/atom-elmjutsu.git"},"license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{"atom-linter":"8.0.0","atom-space-pen-views":"^0.20.0","better-queue":"^3.8.4","chokidar":"1.5.2","fs-extra":"0.30.0","tmp":"0.0.28","underscore-plus":"1.6.6","untildify":"3.0.2"},"providedServices":{"autocomplete.provider":{"versions":{"2.0.0":"provideAutocomplete"}},"hyperclick.provider":{"versions":{"0.0.0":"provideHyperclick"}}},"consumedServices":{"status-bar":{"versions":{"^1.0.0":"consumeStatusBar"}},"linter-elm-make.getWorkDirectory":{"versions":{"^1.0.0":"consumeGetWorkDirectory"}}},"readme":"# Elmjutsu\n\nA bag of tricks for developing with [Elm](http://elm-lang.org).\n\nhttps://atom.io/packages/elmjutsu\n\n## Setup\n\n* Install [Elm](http://elm-lang.org/install).\n* Install [language-elm](https://atom.io/packages/language-elm) (no need to install `elm-oracle` or `goto`).\n* For `Go to Definition`:\n  * Install [hyperclick](https://atom.io/packages/hyperclick) (optional).\n* For `Autocomplete`:\n  * Install [autocomplete-plus](https://atom.io/packages/autocomplete-plus) (installed by default).\n  * Install [snippets](https://atom.io/packages/snippets) (optional, installed by default).\n* Add your [keybindings](#keybindings).\n\nRelated Atom packages:\n- [linter-elm-make](https://atom.io/packages/linter-elm-make) for error highlighting and quick fixes\n- [elm-format](https://atom.io/packages/elm-format) to format your Elm source code on save\n- More here: https://atom.io/packages/search?q=elm\n\n## Features Overview\n\n* [Autocomplete](#autocomplete)\n  * [Global Autocomplete](#global-autocomplete)\n  * [Type-Aware Autocomplete](#type-aware-autocomplete)\n  * [Autocomplete Snippets](#autocomplete-snippets)\n  * [Special completions](#special-completions)\n  * [Regex filtering](#regex-autocomplete-filtering)\n\n* Navigation\n  * [Go to Definition](#go-to-definition)\n  * [Go to Symbol](#go-to-symbol)\n  * [Find Usages](#find-usages)\n  * [Go to Next Usage](#go-to-next-usage)\n  * [Go to Previous Usage](#go-to-previous-usage)\n  * [Go Back](#go-back)\n\n* Information\n  * [Show Types in Tooltip](#show-types-in-tooltip)\n  * [Toggle Sidekick](#toggle-sidekick)\n    * Show the type and documentation for the symbol at cursor position in a panel.\n  * [Infer Type](#infer-type)\n\n* Imports Management\n  * [Add Import](#add-import)\n\n* Package Management\n  * [Install Package](#install-package)\n  * [Uninstall Package](#uninstall-package)\n\n* Refactoring\n  * [Rename Symbol](#rename-symbol)\n  * [Surround with `let`](#surround-with-let)\n  * [Lift to `let`](#lift-to-let)\n  * [Lift to top-level](#lift-to-top-level)\n\n## Feature Details\n\nBy default, the only thing this package does is parse your project's source files to extract information, and download documentation of 3rd-party Elm packages.  You have to manually enable the features that you need.  The downloaded documentation files will be saved to the path set in `Cache Directory` in the settings view.  If `Cache Directory` is blank, a temporary directory will be used.  Take note that most operating systems delete temporary directories at bootup or at regular intervals.\n\n### <a name=\"autocomplete\"></a>Autocomplete\n\nAutocomplete is turned off by default.  To turn it on, check `Enable Autocomplete` in the package settings.\n\nThis provides suggestions for imports, project symbols, and 3rd-party package symbols.\n\n* It's recommended to uncheck `Enable autocomplete` of the [language-elm](https://atom.io/packages/language-elm) package to prevent duplicate suggestions.\n\n![autocomplete](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/autocomplete.gif?raw=true)\n\n#### <a name=\"global-autocomplete\"></a>Global Autocomplete\n* Check `Enable Global Autocomplete` if you want to include unimported project symbols.  This will also allow :zap:`Auto import` completion (which works like [Add Import](#elmjutsu-add-import)).  Take note that you may encounter some lag if you have a very large project.\n\n![auto-import](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/auto-import.gif?raw=true)\n\n#### <a name=\"type-aware-autocomplete\"></a>Type-Aware Autocomplete\n* Check `Enable Type-Aware Autocomplete` if you want to prioritize suggestions matching the expected type at cursor position.\n  * The type can be inferred via the `Infer Type` command, but it's recommended to check `Infer Expected Type At Cursor On The Fly` in the package settings instead.\n  * This will also allow :zap:`Replace with inferred type` completion.\n\n![type-aware-autocomplete](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/type-aware-autocomplete.gif?raw=true)\n\n#### <a name=\"autocomplete-snippets\"></a>Autocomplete Snippets\n* You can also check `Enable Autocomplete Snippets` if you prefer.\n\n![autocomplete-snippet](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/autocomplete-snippet.gif?raw=true)\n\n#### <a name=\"special-completions\"></a>Special completions :zap:\n\nPress <kbd>tab</kbd> to go to the next tab stop (similar to how snippets work).  Special completions can be disabled individually in the package settings.\n\n* :zap:`Insert module`\n* :zap:`Insert let/in`\n* :zap:`Insert if/then/else`\n\n![construct-basic](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/construct-basic.gif?raw=true)\n\n* :zap:`Insert case/of`\n\n![construct-case-of](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/construct-case-of.gif?raw=true)\n\n* :zap:`Insert default arguments`\n\n![construct-default-arguments](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/construct-default-arguments.gif?raw=true)\n\n* :zap:`Replace type with default`\n\n![construct-default-value-for-type](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/construct-default-value-for-type.gif?raw=true)\n\n* :zap:`Define from type annotation`\n\n![construct-from-type-annotation-1](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/construct-from-type-annotation-1.gif?raw=true)\n\n![construct-from-type-annotation-2](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/construct-from-type-annotation-2.gif?raw=true)\n\n* :zap:`Auto import`\n\n  See [Global Autocomplete](#global-autocomplete).\n\n* :zap:`Replace with inferred type`\n\n  See [Type-Aware Autocomplete](#type-aware-autocomplete).\n\n#### <a name=\"regex-autocomplete-filtering\"></a>Regex filtering\nIf the typed text starts with a slash (`/`), the rest of the characters will be used as a regular expression to filter the suggestions.\n\n![regex-autocomplete-filtering](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/regex-autocomplete-filtering.gif?raw=true)\n\n### Navigation\n\n  * #### <a name=\"go-to-definition\"></a>`Elmjutsu: Go To Definition`\n\n    ![go-to-definition](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/go-to-definition.gif?raw=true)\n\n    If the [hyperclick](https://atom.io/packages/hyperclick) package is installed, you can also check `Enable Hyperclick` to jump to definition using `Ctrl` + click / `Cmd` + click (Mac).\n\n  * #### <a name=\"go-to-symbol\"></a>`Elmjutsu: Go To Symbol`\n\n    ![go-to-symbol](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/go-to-symbol.gif?raw=true)\n\n  * #### <a name=\"find-usages\"></a>`Elmjutsu: Find Usages`\n\n    ![find-usages](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/find-usages.gif?raw=true)\n\n  * #### <a name=\"go-to-next-usage\"></a>`Elmjutsu: Go To Next Usage`\n\n    Moves the cursor to the position of the next usage.\n\n  * #### <a name=\"go-to-previous-usage\"></a>`Elmjutsu: Go To Previous Usage`\n\n    Moves the cursor to the position of the previous usage.\n\n  * #### <a name=\"go-back\"></a>`Elmjutsu: Go Back`\n\n    The current cursor position is added to a navigation stack before jumping via:\n      * `Go To Definition`\n      * `Go To Symbol`\n      * `Go To Next Usage`\n      * `Go To Previous Usage`\n\n    Invoke this command to jump back to the previous position.\n\n  * #### <a name=\"hide-usages-panel\"></a>`Elmjutsu: Hide Usages Panel`\n\n    Closes the `Usages` panel (the panel is shown after invoking `Find Usages` or `Rename Symbol`).\n\n### <a name=\"show-types-in-tooltip\"></a>Show Types in Tooltip\nThis is disabled by default.  To turn it on, check `Show Types in Tooltip` in the package settings.  You can also change the placement of the tooltip (`Types Tooltip Position`).\n\n![show-types-in-tooltip](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/show-types-in-tooltip.gif?raw=true)\n\n### <a name=\"toggle-sidekick\"></a>`Elmjutsu: Toggle Sidekick`\nShows the type hints and documentation for the symbol at cursor position.  The size, position of the panel, and amount of information to show can be modified in the package settings.\n\n* Example #1 (default): `Sidekick Position` = \"bottom\", `Sidekick Size` = 0 (Automatically resizes to fit content.)\n\n![sidekick1](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/sidekick1.gif?raw=true)\n\n* Example #2: `Sidekick Position` = \"right\", `Sidekick Size` = 300\n\n![sidekick3](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/sidekick3.gif?raw=true)\n\n* Example #3: `Sidekick Position` = \"bottom\", `Show Types in Sidekick` is checked, `Show Doc Comments in Sidekick` and `Show Source Paths in Sidekick` are unchecked.\n\n![sidekick2](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/sidekick2.gif?raw=true)\n\n### <a name=\"infer-type\"></a>`Elmjutsu: Infer Type`\n* Select some text or make sure that the cursor is between whitespaces or before a closing parenthesis before invoking this command.  If nothing is selected and the cursor is not between whitespaces, the word under the cursor will be selected.\n* Make sure that `Elm Make Path` is properly configured in the package settings.\n* You should also have `Show Types in Tooltip` checked in the package settings (or the Sidekick panel visible) to be able to see the inferred types.\n* This uses similar tricks as those described in [Type Bombs in Elm](http://blog.jenkster.com/2016/11/type-bombs-in-elm.html), which may sometimes fail or give incorrect results.\n\n### <a name=\"infer-types-on-the-fly\"></a>Infer types on the fly\n* You can also check the `Infer Expected Type At Cursor On The Fly` and `Infer Type Of Selection On The Fly` options in the package settings.\n* WARNING: `Infer Type Of Selection On The Fly` currently has bad interactions with some packages that decorate the markers (e.g. `Find And Replace`) :cry: This will be fixed in the future.\n\n![infer-types-on-the-fly](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/infer-types-on-the-fly.gif?raw=true)\n\n<!-- ### <a name=\"infer-hole-types\"></a>`Elmjutsu: Infer Hole Types`\n* Use question marks (`?`) to represent the type holes.\n* Make sure that `Elm Make Path` is properly configured in the package settings.\n* You should also have `Show Types in Tooltip` checked in the package settings (or the Sidekick panel visible) to be able to see the inferred types.\n* You can also check the `Infer Hole Types On The Fly` option in the package settings.\n* This uses the trick described in [Type Bombs in Elm](http://blog.jenkster.com/2016/11/type-bombs-in-elm.html) and may sometimes fail.\n\n![infer-hole-types](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/infer-hole-types.gif?raw=true)\n\n![infer-hole-types-2](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/infer-hole-types-2.gif?raw=true)\n-->\n### <a name=\"add-import\"></a>`Elmjutsu: Add Import`\n\nQuickly adds an import without scrolling to the top of the file.  Also sorts the imports, removes duplicates, and removes [defaults](http://package.elm-lang.org/packages/elm-lang/core/latest/) automatically.\n\n* ProTip: There's no \"Sort Imports\" command, but you can achieve the same result by invoking `Add Import` and choosing an already imported symbol (like `+`, for example).\n\n![add-import](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/add-import.gif?raw=true)\n\n### Package Management\n\n  * #### <a name=\"install-package\"></a>`Elmjutsu: Install Package`\n\n    Quickly installs a package.\n\n    - This runs `elm-package install --yes <name> <version>` (or `elm-package install --yes <name>` if the selected version is \"Auto\").\n    - Make sure that `Elm Package Path` is properly configured in the package settings.\n\n  * ### <a name=\"uninstall-package\"></a>`Elmjutsu: Uninstall Package`\n\n    Removes an installed package.\n\n    - This removes the dependency from `elm-package.json`, then runs `elm-package install --yes` to clean up.\n\n### Refactoring\n\n  * #### <a name=\"rename-symbol\"></a>`Elmjutsu: Rename Symbol`\n\n    Renames the symbol across the whole project.  Take note that this is *not* an undoable operation.\n\n    * Press <kbd>enter</kbd> to rename or <kbd>escape</kbd> to cancel.\n    * Uncheck usages to exclude.\n    * Modified modules with open editors will *not* be saved automatically.\n    * Renaming a module will *not* rename the associated file.\n    * Currently, this also modifies the symbol name inside comments.\n\n    ![rename-symbol](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/rename-symbol.gif?raw=true)\n\n  * #### <a name=\"surround-with-let\"></a>`Elmjutsu: Surround With Let`\n\n    * Press <kbd>escape</kbd> when you're done naming your variable.\n\n    ![surround-with-let](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/surround-with-let-in.gif?raw=true)\n\n  * #### <a name=\"lift-to-let\"></a>`Elmjutsu: Lift To Let`\n\n    * Press <kbd>escape</kbd> when you're done naming your variable.\n    * There are still cases where this will not work properly.  There will be a better implementation in the future.\n\n    ![lift-to-let](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/lift-to-let.gif?raw=true)\n\n  * #### <a name=\"lift-to-top-level\"></a>`Elmjutsu: Lift To Top Level`\n\n    * Press <kbd>escape</kbd> when you're done naming your function.\n    * This does not compute the needed function arguments (yet?), so you also have to type those in with the function name.\n\n    ![lift-to-top-level](https://github.com/halohalospecial/atom-elmjutsu/blob/master/images/lift-to-top-level.gif?raw=true)\n\n\n## <a name=\"keybindings\"></a>Keybindings\n\nHere is an example:\n```\n'atom-text-editor:not([mini])[data-grammar^=\"source elm\"]':\n  'f12': 'elmjutsu:go-to-definition'\n  'ctrl-r': 'elmjutsu:go-to-symbol'\n  'shift-f12': 'elmjutsu:find-usages'\n  'f8': 'elmjutsu:go-to-next-usage'\n  'shift-f8': 'elmjutsu:go-to-previous-usage'\n  'ctrl-f12': 'elmjutsu:go-back'\n  'alt-insert': 'elmjutsu:add-import'\n  'f2': 'elmjutsu:rename-symbol'\n  'alt-shift-l': 'elmjutsu:surround-with-let'\n  'alt-l': 'elmjutsu:lift-to-let'\n  'alt-t': 'elmjutsu:lift-to-top-level'\n  'alt-i': 'elmjutsu:infer-type'\n\n'atom-workspace':\n  'f1': 'elmjutsu:toggle-sidekick'\n  'ctrl-shift-f12': 'elmjutsu:hide-usages-panel'\n```\n<!--\n'atom-text-editor':\n  'alt-enter': 'elmjutsu:eval'\n  'ctrl-enter': 'elmjutsu:pipe-selections'\n\n'.elmjutsu-pipe-selections':\n  \"ctrl-enter\": \"elmjutsu:apply-pipe-selections\"\n```\n-->\n\nAdd them to your `keymap.cson` or bind them from `Settings` > `Keybindings`.\n\n## Notes\n\n* Be sure to check out the [settings](http://flight-manual.atom.io/using-atom/sections/atom-packages/#package-settings) for this package to find out about the available options.\n* It's highly recommended to read `CHANGELOG.md` before upgrading to a newer version to check for breaking changes.\n* The commands only work for top-level values for now.\n* You may encounter weird behaviors if multiple files are using the same module name in your project.\n* Major parts of this will be rewritten when a way to get the AST becomes available. Also, more features :)\n\n## Credits\n\n* The initial code was based on the [source](https://github.com/elm-lang/elm-lang.org) of [Try Elm](http://elm-lang.org/try).\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/halohalospecial/atom-elmjutsu/issues"},"homepage":"https://github.com/halohalospecial/atom-elmjutsu#readme","_id":"elmjutsu@5.2.0","_shasum":"4bc95a84ef2d1f8f9a7c04f5d91e86300ef3d51f","_resolved":"file:../d-11725-53620-ak5dhs/package.tgz","_from":"../d-11725-53620-ak5dhs/package.tgz"}