# vim:syntax=zsh

# I copied this function here so I could put the branch name after
# ZSH_THEME_GIT_PROMPT_DIRTY or ZSH_THEME_GIT_PROMPT_CLEAN instead of before.
# original function is in ~/.oh-my-zsh/lib/git.zsh

git_prompt_info() {
  if [[ "$(command git config --get oh-my-zsh.hide-status 2>/dev/null)" != "1" ]]; then
    ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
    ref=$(command git rev-parse --short HEAD 2> /dev/null) || return 0
    echo "$ZSH_THEME_GIT_PROMPT_PREFIX$(parse_git_dirty)${ref#refs/heads/}$ZSH_THEME_GIT_PROMPT_SUFFIX"
  fi
}

prompt_rvm() {
  rbv=`rvm-prompt`
  rbv=${rbv#ruby-}
  [[ $rbv == *"@"* ]] || rbv="${rbv}@default"
  echo $rbv
}


# Mac-dots stuff I stole.
source_if_exists() {
  local file ;
  for file ; do
    [ -f "${file}" ] && source "${file}" ;
  done
}

precmd () {
  print -Pn "\e]2;%~\a"
}


# Stuff taken from Chris Toomey
_not_inside_tmux() { [[ -z "$TMUX" ]] }

ensure_tmux_is_running() {
  if _not_inside_tmux; then
    tat
  fi
}

# Format CSVs
function csv {
  cat $1 | perl -pe 's/((?<=,)|(?<=^)),/ ,/g;' | column -t -s, | less -S
}


################################################################################
# git functions
################################################################################

# This creates a double-duty usage for 'g'. If you type just 'g' alone, it will
# call 'git status', otherwise it is just an alias for 'git'.
# function g {
#   if [[ $# > 0 ]]; then
#     git $@
#   else
#     git status -sb
#   fi
# }

function gupdate {
  git stash
  git checkout develop
  git pull
  git checkout @{-1}
  git rebase develop
}

function gro {
  git reset --hard origin/$1
}


################################################################################
# Mac Dots stuff
################################################################################

# Log output:
#
# * 51c333e    (12 days)    <Gary Bernhardt>   add vim-eunuch
#
# The time massaging regexes start with ^[^<]* because that ensures that they
# only operate before the first "<". That "<" will be the beginning of the
# author name, ensuring that we don't destroy anything in the commit message
# that looks like time.
#
# The log format uses } characters between each field, and `column` is later
# used to split on them. A } in the commit subject or any other field will
# break this.

# Helper function to show usage for any macdots function
__md__help() {
  case $1 in
    -h) echo "desc:   ${@: -2:1}\nusage:  ${@: -1:1}"; return 1 ;;
  esac
}

# local hash="%C(yellow)%h%Creset"
# local relative_time="%Cgreen%cr%Creset"
# local date="%Cgreen%ad%Creset"
# local author="%C(bold blue)%an%Creset"
# local refs="%C(red)%d%Creset"
# local subject="%s"


# These names are from the iTerm ANSI Colors settings and may not reflect the
# actual color (for ex: in Solarized light, "bold yellow" may be a grey.
local BLACK=$'\e[0;30m'
local BRIGHT_BLACK=$'\e[1;30m'
local RED=$'\e[0;31m'
local BRIGHT_RED=$'\e[1;31m'
local GREEN=$'\e[0;32m'
local BRIGHT_GREEN=$'\e[1;32m'
local YELLOW=$'\e[0;33m'
local BRIGHT_YELLOW=$'\e[1;33m'
local BLUE=$'\e[0;34m'
local BRIGHT_BLUE=$'\e[1;34m'
local MAGENTA=$'\e[0;35m'
local BRIGHT_MAGENTA=$'\e[1;35m'
local CYAN=$'\e[0;36m'
local BRIGHT_CYAN=$'\e[1;36m'
local WHITE=$'\e[0;37m'
local BRIGHT_WHITE=$'\e[1;37m'
local RESET=$'\e[0m'

local hash="$CYAN%h$RESET"
local relative_time="$GREEN%cr$RESET"
local date="$GREEN%ad$RESET"
local author="$BLUE%an$RESET"
local refs="$MAGENTA%d$RESET"
local subject="%s"

FORMAT="$hash}$relative_time}$author}$refs $subject"

__md__glp() {
  __md__help $@ "Show the GitLog in pretty format [ Git Log Pretty ]" "glp [number of rows]"
  [ $? -eq 1 ] && return 0

  if [ -z "$1" ] ; then
    local rows=20
  else
    local rows=$1
  fi
  git log --graph --pretty="tformat:${FORMAT}" -$rows |
    # Replace '2 years ago' with (2 years)
    sed -Ee 's/(^[^<]*) ago/\1/' |
    # Replace '2 years, 5 months' with (2 years)
    sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?/\1/' |
    # Line columns up based on } delimiter
    column -s '}' -t |
    # Page only if we need to
    less -F -X -S -E -R
}

DEPLOYMENT_FORMAT="%ad}%an}%s}%h"

__md__gld() {
  __md__help $@ "Show the GitLog in deployment doc format [ Git Log Deployment ]" "gld [number of rows]"
  [ $? -eq 1 ] && return 0

  if [ -z "$1" ] ; then
    local rows=1
  else
    local rows=$1
  fi
  git log --no-merges --date=short --pretty="tformat:${DEPLOYMENT_FORMAT}" -$rows |
    # Replace (2 years ago) with (2 years)
    sed -Ee 's/(^[^<]*) ago)/\1)/' |
    # Replace (2 years, 5 months) with (2 years)
    sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?)/\1)/' |
    # ensure each line starts with '* '
    sed -Ee 's/(^.)/\* \1/' |
    # Line columns up based on } delimiter
    column -s '}' -t |
    # Page only if we need to
    less -FXRS
}

unset hash;
unset relative_time;
unset date;
unset author;
unset refs;
unset subject;


# Name of current git branch
__md__gbr() {
  branch="$(git symbolic-ref HEAD 2>/dev/null)" || branch="(unnamed branch)"
  echo ${branch##refs/heads/}
}

__md__gdfr() {
  __md__help $@ "Delete git branch from remote [ Git Delete From Remote ]" "gdrf [-c | name-of-branch]"
  [ $? -eq 1 ] && return 0

  if [ ! $# -eq 1 ] ; then __md__gdfr -h ; return ; fi

  case $1 in
    -c) local branch=`current_branch` ;;
     *) local branch=$1 ;;
  esac

  echo "\e[1;33mAre you SURE you want to delete the remote '$branch' branch?\e[0m"
  echo "(anything other than 'yes' will cancel) > \c"
  read line
  if [ "$line" = yes ]
  then
    git push origin :$branch
  else
    echo "\e[1;32mClose one dude!\e[0m"
  fi
}

__md__gh() {
  __md__help $@ "Opens GitHub for the current git repository in your browser" "gh"
  [ $? -eq 1 ] && return 0

  giturl=$(git config --get remote.origin.url)
  if [ -z "$giturl" ] ; then
    echo "Not a git repository or no remote.origin.url set"
    return
  fi
  open $(__md__gurl)
}

__md__gmpr() {
  __md__help $@ "Merge branch, create a merge commit and delete the local branch [ Git Merge Pull Request ]" "gmpr <branch>"
  [ $? -eq 1 ] && return 0

  if [ ! $# -eq 1 ] ; then __md__gmpr -h ; return ; fi

  git merge $1 --no-ff --log --no-edit
  git branch -d $1
}

__md__gptr() {
  __md__help $@ "Push the current branch to origin [ Git Push To Remote ]" "gptr"
  [ $? -eq 1 ] && return 0

  git push -u origin `current_branch`
}

__md__gpr() {
  __md__help $@ "Initiate pull request for the current branch [ Git Pull Request ]" "gpr"
  [ $? -eq 1 ] && return 0

  __md__gptr
  giturl=$(__md__gurl)
  giturl=${giturl/git\@github\.com\:/https://github.com/}
  giturl=${giturl/tree/pull\/new}
  open $giturl
}

__md__grbw() {
  __md__help $@ "Rebase with the specified remote branch [ Git ReBase With ]" "grbw <remote-branch>"
  [ $? -eq 1 ] && return 0

  if [ ! $# -eq 1 ] ; then __md__grbw -h ; return ; fi

  git pull --rebase origin $1 ;
}

__md__groh() {
  __md__help $@ "Reset the current branch to origin [ Git Reset Origin Hard ]" "groh"
  [ $? -eq 1 ] && return 0

  origin_branch="origin/$(current_branch)"
  git reset $origin_branch --hard;
}

# Git Url for current repo with branch
__md__gurl() {
  giturl=$(git config --get remote.origin.url)
  if [ -z "$giturl" ] ; then
    echo "Not a git repository or no remote.origin.url set"
    return
  fi

  giturl=${giturl/git\@github\.com\:/https://github.com/}
  giturl=${giturl/\.git/\/tree/}
  branch=$(__md__gbr)
  giturl=$giturl$branch
  echo $giturl
}


# Make sure everything is bundled before running rspec
__rws__rspec() {
  bundle check || bundle || return 1
  bundle exec rspec $*
}

# Migrate both dev and test dbs
__rws__db_migrate() {
  if bundle exec rake db:migrate; then
    echo "==> Dev migrated"
    if bundle exec rake db:migrate RAILS_ENV=test; then
      echo "==> Test migrated"
    fi
  fi
}


# Reset both dev and test dbs
__rws__db_reset() {
  if bundle exec rake db:reset; then
    echo "==> Dev migrated"
    if bundle exec rake db:reset RAILS_ENV=test; then
      echo "==> Test migrated"
    fi
  fi
}

# Run ctags for all Ruby files in a project (including gems)
__rws__ctags_ruby() {
  ctags -R --languages=ruby --exclude=.git --exclude=log . $(bundle list --paths)
}

# Blatently stolen from tjmcewan's (https://gist.github.com/tjmcewan) comment here:
# https://gist.github.com/phette23/5270658
__rws__set_tab_name() {
  echo -ne "\e]1;${PWD##*/}\a"
}

__rws__fuzzy_open() {
  $EDITOR $(f)
}

__rws__qr_code() {
  if [ -z "$1" ] ; then
    echo "usage: qr STRING_TO_ENCODE"
  else
    curl qrenco.de/$1
  fi
}

# Show current version of Ruby
# Modified from: https://github.com/denysdovhan/spaceship-prompt/blob/master/sections/ruby.zsh
__rws__ruby_version() {
  # Show versions only for Ruby-specific folders
  [[ -f Gemfile || -f Rakefile || -n *.rb(#qN^/) ]] || return

  local 'ruby_version'

  if __rws__cmd_exists rvm-prompt; then
    ruby_version=$(rvm-prompt i v g)
  elif __rws__cmd_exists chruby; then
    ruby_version=$(chruby | sed -n -e 's/ \* //p')
  elif __rws__cmd_exists rbenv; then
    ruby_version=$(rbenv version-name)
  elif __rws__cmd_exists asdf; then
    # split output on space and return first element
    ruby_version=${$(asdf current ruby)[1]}
  else
    return
  fi

  [[ -z $ruby_version || "${ruby_version}" == "system" ]] && return

  # Add 'v' before ruby version that starts with a number
  [[ "${ruby_version}" =~ ^[0-9].+$ ]] && ruby_version="v${ruby_version}"

  echo $ruby_version
}

__rws__cmd_exists() {
  command -v $1 > /dev/null 2>&1
}

__rws__tc() {
  __md__help $@ "Show the most used commands in current user's history" "tc [number of rows]"
  [ $? -eq 1 ] && return 0

  if [ -z "$1" ] ; then
    local n=10
  else
    local n=$1
  fi

  history | \
  awk '{CMD[$4]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | \
  grep -v "./" | \
  column -c3 -s " " -t | \
  sort -nr | nl |  head -n $n
}
