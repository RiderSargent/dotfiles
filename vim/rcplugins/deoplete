" vim:ft=vim

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'Shougo/deoplete-rct',      { 'for': 'ruby' }
  Plug 'fishbullet/deoplete-ruby', { 'for': 'ruby' }
  Plug 'Shougo/neco-vim',          { 'for': ['vim', 'nvim'] }
  Plug 'awetzel/elixir.nvim',      { 'for': 'elixir' }
  Plug 'carlitux/deoplete-ternjs', { 'for': 'js' }
  Plug 'pbogut/deoplete-elm',      { 'for': 'elm' }
  Plug 'zchee/deoplete-zsh',       { 'for': 'zsh' }


" inoremap <silent><expr> <TAB>
" \ pumvisible() ? "\<C-n>" :
" \ <SID>check_back_space() ? "\<TAB>" :
" \ deoplete#mappings#manual_complete()
" function! s:check_back_space() abort "{{{
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~ '\s'
" endfunction"}}}


" inoremap <silent><expr> <TAB>
"     \ pumvisible() ? "\<C-n>" :
"     \ <SID>check_back_space() ? "\<TAB>" :
"     \ deoplete#mappings#manual_complete()

" inoremap <silent><expr> <TAB>
"     \ pumvisible() ? "\<C-n>" :
"     \ <SID>check_back_space() ? "\<TAB>" :
"     \ deoplete#smart_close_popup()

" function! s:check_back_space() abort "{{{
"     let col = col('.') - 1
"     return !col || getline('.')[col - 1]  =~ '\s'
" endfunction"}}}

" let g:UltiSnipsExpandTrigger = ""
